#include <lsp/synth/midi_channel.hpp>

using namespace lsp;
using namespace lsp::midi;
using namespace lsp::synth;


static const std::unordered_map<
	uint8_t, std::tuple<
	float, // v: volume(adjuster)
	float, // a: sec
	float, // h: sec
	float, // d: sec
	float, // s: level
	float, // f: Linear : level/sec, Exp : dBFS/sec
	float // r: sec
	>
> sMelodyParams = {
	{0,   { 1.00, 0.02, 0.00, 3.00,  0.00, 0.00, 1.00 }},
	{1,   { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 1.00 }},
	{2,   { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 1.00 }},
	{3,   { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 1.00 }},
	{4,   { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 1.00 }},
	{5,   { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 1.00 }},
	{6,   { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 1.00 }},
	{7,   { 1.00, 0.02, 0.00, 6.00,  0.00, 0.00, 0.10 }},
	{8,   { 1.00, 0.02, 0.00, 4.00,  0.00, 0.00, 1.50 }},
	{9,   { 1.00, 0.02, 0.00, 4.00,  0.00, 0.00, 2.00 }},
	{10,  { 1.00, 0.02, 0.00, 4.00,  0.00, 0.00, 2.00 }},
	{11,  { 1.00, 0.02, 0.00, 7.00,  0.00, 0.00, 1.00 }},
	{12,  { 1.00, 0.02, 0.00, 3.00,  0.00, 0.00, 2.00 }},
	{13,  { 1.00, 0.02, 0.00, 3.00,  0.00, 0.00, 2.00 }},
	{14,  { 1.00, 0.02, 0.00, 7.00,  0.00, 0.00, 5.00 }},
	{15,  { 1.00, 0.02, 0.00, 3.00,  0.00, 0.00, 2.00 }},
	{16,  { 1.00, 0.02, 0.00, 0.50,  0.70, 0.00, 0.10 }},
	{17,  { 1.00, 0.02, 0.00, 0.50,  0.70, 0.00, 0.10 }},
	{18,  { 1.00, 0.02, 0.00, 0.50,  0.70, 0.00, 0.10 }},
	{19,  { 1.00, 0.02, 0.00, 0.50,  0.70, 0.00, 1.00 }},
	{20,  { 1.00, 0.02, 0.00, 1.00,  0.50, 0.00, 1.00 }},
	{21,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{22,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{23,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{24,  { 1.00, 0.02, 0.00, 7.00,  0.00, 0.00, 0.10 }},
	{25,  { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 0.20 }},
	{26,  { 1.00, 0.02, 0.00, 6.00,  0.00, 0.00, 0.20 }},
	{27,  { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 0.20 }},
	{28,  { 1.00, 0.02, 0.00, 5.00,  0.00, 0.00, 0.20 }},
	{29,  { 1.00, 0.02, 0.00, 7.00,  0.08, 0.00, 0.10 }},
	{30,  { 1.00, 0.02, 0.20, 7.00,  0.08, 0.00, 0.10 }},
	{31,  { 1.00, 0.02, 0.20, 10.00, 0.00, 0.00, 0.10 }},
	{32,  { 1.00, 0.02, 0.00, 5.00,  0.08, 0.00, 0.10 }},
	{33,  { 1.00, 0.02, 0.00, 5.00,  0.03, 0.00, 0.10 }},
	{34,  { 1.00, 0.02, 0.00, 4.00,  0.06, 0.00, 0.10 }},
	{35,  { 1.00, 0.02, 0.00, 10.00, 0.00, 0.00, 0.10 }},
	{36,  { 1.00, 0.02, 0.00, 3.00,  0.01, 0.00, 0.10 }},
	{37,  { 1.00, 0.02, 0.00, 3.00,  0.01, 0.00, 0.10 }},
	{38,  { 1.00, 0.02, 0.00, 1.50,  0.07, 0.00, 0.10 }},
	{39,  { 1.00, 0.02, 0.20, 5.00,  0.13, 0.00, 0.10 }},
	{40,  { 1.00, 0.03, 0.20, 5.00,  0.66, 0.00, 0.20 }},
	{41,  { 1.00, 0.03, 0.35, 5.00,  0.66, 0.00, 0.20 }},
	{42,  { 1.00, 0.03, 0.00, 1.00,  0.80, 0.00, 0.20 }},
	{43,  { 1.00, 0.03, 0.00, 1.00,  0.80, 0.00, 0.20 }},
	{44,  { 1.00, 0.03, 0.00, 1.00,  0.90, 0.00, 1.00 }},
	{45,  { 1.00, 0.03, 0.00, 0.50,  0.00, 0.00, 0.50 }},
	{46,  { 1.00, 0.02, 0.00, 4.00,  0.00, 0.00, 3.00 }},
	{47,  { 3.50, 0.02, 0.00, 0.30,  0.00, 0.00, 0.30 }},
	{48,  { 1.00, 0.02, 0.00, 0.30,  0.80, 0.00, 0.70 }},
	{49,  { 1.00, 0.03, 0.00, 0.30,  0.80, 0.00, 1.20 }},
	{50,  { 1.00, 0.03, 0.00, 0.30,  0.80, 0.00, 0.70 }},
	{51,  { 1.00, 0.03, 0.00, 0.30,  0.80, 0.00, 1.20 }},
	{52,  { 1.00, 0.03, 0.00, 0.30,  0.80, 0.00, 0.70 }},
	{53,  { 1.00, 0.03, 0.00, 0.30,  0.80, 0.00, 0.70 }},
	{54,  { 1.00, 0.03, 0.00, 0.50,  0.80, 0.00, 0.70 }},
	{55,  { 2.00, 0.02, 0.10, 0.60,  0.00, 0.00, 0.40 }},
	{56,  { 1.00, 0.03, 0.00, 0.50,  0.60, 0.00, 0.10 }},
	{57,  { 1.00, 0.03, 0.00, 4.00,  0.60, 0.00, 0.10 }},
	{58,  { 1.00, 0.03, 0.00, 2.00,  0.60, 0.00, 0.10 }},
	{59,  { 1.00, 0.03, 0.00, 1.00,  0.60, 0.00, 0.10 }},
	{60,  { 1.00, 0.03, 0.00, 2.00,  0.60, 0.00, 0.10 }},
	{61,  { 1.00, 0.03, 0.00, 1.50,  0.50, 0.00, 0.10 }},
	{62,  { 1.00, 0.03, 0.00, 1.00,  0.50, 0.00, 0.10 }},
	{63,  { 1.00, 0.03, 0.00, 2.00,  0.50, 0.00, 0.10 }},
	{64,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{65,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{66,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{67,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{68,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{69,  { 1.00, 0.03, 0.00, 0.50,  0.80, 0.00, 0.10 }},
	{70,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{71,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{72,  { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{73,  { 1.00, 0.02, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{74,  { 1.00, 0.02, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{75,  { 1.00, 0.02, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{76,  { 1.00, 0.10, 0.00, 0.50,  0.80, 0.00, 0.10 }},
	{77,  { 1.00, 0.03, 0.00, 1.00,  0.80, 0.00, 0.10 }},
	{78,  { 1.00, 0.03, 0.00, 1.00,  0.80, 0.00, 0.30 }},
	{79,  { 1.00, 0.03, 0.00, 1.00,  0.80, 0.00, 0.10 }},
	{80,  { 1.00, 0.02, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{81,  { 1.00, 0.02, 0.00, 1.00,  0.80, 0.00, 0.10 }},
	{82,  { 1.00, 0.02, 0.00, 1.00,  0.60, 0.00, 0.10 }},
	{83,  { 1.00, 0.03, 0.00, 4.00,  0.25, 0.00, 0.10 }},
	{84,  { 1.00, 0.03, 0.03, 4.00,  0.25, 0.00, 0.10 }},
	{85,  { 1.00, 0.03, 0.00, 4.00,  0.56, 0.00, 0.20 }},
	{86,  { 1.00, 0.03, 0.15, 4.00,  0.31, 0.00, 0.30 }},
	{87,  { 1.00, 0.03, 0.00, 4.50,  0.31, 0.00, 0.10 }},
	{88,  { 1.00, 0.03, 0.00, 3.00,  0.56, 0.00, 3.00 }},
	{89,  { 1.00, 0.03, 0.00, 3.00,  0.90, 0.00, 1.00 }},
	{90,  { 1.00, 0.03, 0.00, 3.00,  0.40, 0.00, 0.80 }},
	{91,  { 1.00, 0.03, 0.00, 3.00,  0.90, 0.00, 3.00 }},
	{92,  { 1.00, 0.03, 0.00, 3.00,  0.90, 0.00, 2.50 }},
	{93,  { 1.00, 0.30, 0.00, 8.00,  0.00, 0.00, 2.00 }},
	{94,  { 1.00, 0.03, 0.15, 1.00,  0.90, 0.00, 1.00 }},
	{95,  { 1.00, 0.30, 0.00, 5.00,  0.50, 0.00, 2.00 }},
	{96,  { 1.00, 0.03, 0.00, 4.00,  0.50, 0.00, 2.00 }},
	{97,  { 1.00, 0.03, 0.10, 3.00,  0.70, 0.00, 3.00 }},
	{98,  { 1.00, 0.03, 0.00, 4.00,  0.00, 0.00, 3.00 }},
	{99,  { 1.00, 0.03, 0.00, 4.00,  0.10, 0.00, 2.00 }},
	{100, { 1.00, 0.03, 0.10, 5.00,  0.00, 0.00, 3.00 }},
	{101, { 1.00, 1.00, 0.00, 1.00,  0.90, 0.00, 2.00 }},
	{102, { 1.00, 0.03, 0.00, 1.00,  0.90, 0.00, 2.00 }},
	{103, { 1.00, 0.03, 0.00, 6.00,  0.04, 0.00, 2.00 }},
	{104, { 1.00, 0.03, 0.03, 9.00,  0.00, 0.00, 1.00 }},
	{105, { 1.00, 0.03, 0.00, 6.00,  0.00, 0.00, 1.00 }},
	{106, { 1.00, 0.03, 0.00, 3.00,  0.00, 0.00, 1.00 }},
	{107, { 1.00, 0.03, 0.00, 3.00,  0.00, 0.00, 2.00 }},
	{108, { 1.00, 0.03, 0.00, 1.50,  0.00, 0.00, 1.00 }},
	{109, { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{110, { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{111, { 1.00, 0.03, 0.00, 1.00,  0.70, 0.00, 0.10 }},
	{112, { 1.00, 0.03, 0.00, 3.00,  0.00, 0.00, 1.00 }},
	{113, { 1.00, 0.03, 0.00, 0.40,  0.00, 0.00, 0.30 }},
	{114, { 1.00, 0.03, 0.00, 3.00,  0.00, 0.00, 2.00 }},
	{115, { 1.00, 0.03, 0.00, 0.50,  0.00, 0.00, 0.50 }},
	{116, { 1.00, 0.03, 0.00, 3.00,  0.00, 0.00, 3.00 }},
	{117, { 1.00, 0.03, 0.00, 0.80,  0.00, 0.00, 0.80 }},
	{118, { 1.00, 0.03, 0.00, 0.80,  0.00, 0.00, 0.80 }},
	{119, { 1.00, 2.00, 0.00, 0.10,  0.00, 0.00, 0.10 }},
	{120, { 1.00, 0.03, 0.00, 0.50,  0.00, 0.00, 0.50 }},
	{121, { 1.00, 0.03, 0.00, 0.50,  0.00, 0.00, 0.40 }},
	{122, { 2.00, 0.50, 1.50, 3.00,  0.00, 0.00, 1.50 }},
	{123, { 2.00, 0.50, 0.80, 4.00,  0.00, 0.00, 0.50 }},
	{124, { 2.00, 0.03, 0.00, 1.00,  0.80, 0.00, 0.10 }},
	{125, { 2.00, 3.50, 0.00, 1.00,  0.80, 0.00, 0.70 }},
	{126, { 2.00, 2.00, 0.00, 1.00,  0.80, 0.00, 0.80 }},
	{127, { 2.50, 0.03, 0.00, 1.50,  0.00, 0.00, 1.50 }},
};

std::unique_ptr<lsp::synth::Voice> lsp::synth::MidiChannel::createMelodyVoice(uint8_t noteNo, uint8_t vel)
{
	float v = 1.f; // volume(adjuster)
	float a = 0.f; // sec
	float h = 0.f; // sec
	float d = 0.f; // sec
	float s = 1.f; // level
	float f = 0.f; // Linear : level/sec, Exp : dBFS/sec
	float r = 0.f; // sec

	// 主要パラメータのロード
	if(auto found = sMelodyParams.find(mProgId); found != sMelodyParams.end()) {
		std::tie(v, a, h, d, s, f, r) = found->second;
	}

	// リズム系の楽器は若干パラメータを補正 ※ドラムほど強くパラメータは変更しない
	size_t waveTableId = WaveTable::Preset::SquareWave;
	float noteNoAdjuster = 0;
	switch(mProgId)
	{
	case 47:
	case 121:
	case 122:
	case 125:
	case 126:
	case 127:
		waveTableId = WaveTable::Preset::DrumNoise;
		noteNoAdjuster -= 12; // 1オクターブ下げる
		break;
	}


	if(mSystemType != SystemType::GM1) {
		a *= powf(10.0f, (ccAttackTime / 128.f - 0.5f) * 4.556f);
		d *= powf(10.0f, (ccDecayTime / 128.f - 0.5f) * 4.556f);
		r *= powf(10.0f, (ccReleaseTime / 128.f - 0.5f) * 4.556f);
	}

	// MEMO 人間の聴覚ではボリュームは対数的な特性を持つため、ベロシティを指数的に補正する
	// TODO sustain_levelで除算しているのは旧LibSynth++からの移植コード。 補正が不要になったら削除すること
	float volume = powf(10.f, -20.f * (1.f - vel / 127.f) / 20.f) * v / ((s > 0.8f && s != 0.f) ? s : 0.8f);
	float cutoffLevel = 0.01f;
	static const lsp::filter::EnvelopeGenerator<float>::Curve curveExp3(3.0f);

	float overtuneGain = 0.f; // dB
	if(mSystemType != SystemType::GM1) {
		overtuneGain = (getNRPN_MSB(1, 33).value_or(64) / 128.f - 0.5f) * 5.f;
	}

	auto wg = mWaveTable.get(waveTableId);
	auto voice = std::make_unique<lsp::synth::WaveTableVoice>(mSampleFreq, wg, noteNo + noteNoAdjuster, mCalculatedPitchBend, volume, ccPedal);
	voice->setResonance(2.f, overtuneGain);

	auto& eg = voice->envolopeGenerator();
	eg.setMelodyEnvelope(
		(float)mSampleFreq, curveExp3,
		std::max(0.001f, a),
		h,
		std::max(0.001f, d),
		s,
		f,
		std::max(0.001f, r),
		cutoffLevel
	);
	eg.noteOn();
	return voice;
}
